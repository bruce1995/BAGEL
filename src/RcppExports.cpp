// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_mu
arma::mat compute_mu(int H, arma::rowvec e, arma::cube alpha, arma::cube gamma, arma::cube R, arma::cube beta, arma::mat Z, arma::mat data, int D, int Q, int S, int B);
RcppExport SEXP _BAGEL_compute_mu(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_mu(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B));
    return rcpp_result_gen;
END_RCPP
}
// compute_muk2
arma::mat compute_muk2(arma::mat& alphakt, arma::mat gammakt, arma::mat& Rk, arma::mat& betak, arma::mat& Zkt, arma::mat& datak, int D, int Q, int S, int B);
RcppExport SEXP _BAGEL_compute_muk2(SEXP alphaktSEXP, SEXP gammaktSEXP, SEXP RkSEXP, SEXP betakSEXP, SEXP ZktSEXP, SEXP datakSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type alphakt(alphaktSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gammakt(gammaktSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Rk(RkSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type betak(betakSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Zkt(ZktSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type datak(datakSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_muk2(alphakt, gammakt, Rk, betak, Zkt, datak, D, Q, S, B));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha
List update_alpha(int H, arma::rowvec& e, arma::cube alpha, arma::cube& gamma, arma::cube& R, arma::cube& beta, arma::mat& Z, arma::mat& data, int D, int Q, int S, int B, arma::mat mu, arma::mat Y, double sigma_square, double sigma_square_alpha);
RcppExport SEXP _BAGEL_update_alpha(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP, SEXP muSEXP, SEXP YSEXP, SEXP sigma_squareSEXP, SEXP sigma_square_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square_alpha(sigma_square_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B, mu, Y, sigma_square, sigma_square_alpha));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma
List update_gamma(int H, arma::rowvec& e, arma::cube& alpha, arma::cube gamma, arma::cube& R, arma::cube& beta, arma::mat& Z, arma::mat& data, int D, int Q, int S, int B, arma::mat mu, arma::mat Y, double sigma_square, double sigma_square_gamma);
RcppExport SEXP _BAGEL_update_gamma(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP, SEXP muSEXP, SEXP YSEXP, SEXP sigma_squareSEXP, SEXP sigma_square_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square_gamma(sigma_square_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B, mu, Y, sigma_square, sigma_square_gamma));
    return rcpp_result_gen;
END_RCPP
}
// update_beta
arma::cube update_beta(int H, arma::rowvec& e, arma::cube& alpha, arma::cube& gamma, arma::cube& R, arma::cube beta, arma::mat& Z, arma::mat& data, int D, int Q, int S, int B, arma::mat Y, double sigma_square, double sigma_square_beta);
RcppExport SEXP _BAGEL_update_beta(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP, SEXP YSEXP, SEXP sigma_squareSEXP, SEXP sigma_square_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square_beta(sigma_square_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_beta(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B, Y, sigma_square, sigma_square_beta));
    return rcpp_result_gen;
END_RCPP
}
// compute_likelihood
double compute_likelihood(arma::rowvec a, arma::mat mu, arma::mat U, double sigma_square);
RcppExport SEXP _BAGEL_compute_likelihood(SEXP aSEXP, SEXP muSEXP, SEXP USEXP, SEXP sigma_squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_likelihood(a, mu, U, sigma_square));
    return rcpp_result_gen;
END_RCPP
}
// update_R
arma::cube update_R(int H, arma::rowvec& e, arma::cube& alpha, arma::cube& gamma, arma::cube R, arma::cube& beta, arma::mat& Z, arma::mat& data, int D, int Q, int S, int B, arma::rowvec& a, arma::mat& U, arma::mat mu, arma::mat Y, double rho, double sigma_square);
RcppExport SEXP _BAGEL_update_R(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP, SEXP aSEXP, SEXP USEXP, SEXP muSEXP, SEXP YSEXP, SEXP rhoSEXP, SEXP sigma_squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    rcpp_result_gen = Rcpp::wrap(update_R(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B, a, U, mu, Y, rho, sigma_square));
    return rcpp_result_gen;
END_RCPP
}
// update_e
List update_e(int H, arma::rowvec e, arma::cube alpha, arma::cube gamma, arma::cube R, arma::cube beta, arma::mat& Z, arma::mat& data, int D, int Q, int S, int B, arma::rowvec& a, arma::mat& U, arma::mat mu, arma::mat Y, int N, double sigma_square, double m0, double rho, int H_max);
RcppExport SEXP _BAGEL_update_e(SEXP HSEXP, SEXP eSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP RSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP dataSEXP, SEXP DSEXP, SEXP QSEXP, SEXP SSEXP, SEXP BSEXP, SEXP aSEXP, SEXP USEXP, SEXP muSEXP, SEXP YSEXP, SEXP NSEXP, SEXP sigma_squareSEXP, SEXP m0SEXP, SEXP rhoSEXP, SEXP H_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type e(eSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type H_max(H_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(update_e(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B, a, U, mu, Y, N, sigma_square, m0, rho, H_max));
    return rcpp_result_gen;
END_RCPP
}
// update_sig_square
double update_sig_square(arma::mat& omega, double a, double b);
RcppExport SEXP _BAGEL_update_sig_square(SEXP omegaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sig_square(omega, a, b));
    return rcpp_result_gen;
END_RCPP
}
// update_sig_square_cub
double update_sig_square_cub(arma::cube& Y, double a, double b);
RcppExport SEXP _BAGEL_update_sig_square_cub(SEXP YSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sig_square_cub(Y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// update_omega
arma::mat update_omega(arma::mat& Y, arma::mat& mu, arma::mat& Comega, double sigma_square, int Q);
RcppExport SEXP _BAGEL_update_omega(SEXP YSEXP, SEXP muSEXP, SEXP ComegaSEXP, SEXP sigma_squareSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Comega(ComegaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(update_omega(Y, mu, Comega, sigma_square, Q));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_sigma_square
double update_gamma_sigma_square(arma::cube& gamma, int B, double a, double b);
RcppExport SEXP _BAGEL_update_gamma_sigma_square(SEXP gammaSEXP, SEXP BSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_sigma_square(gamma, B, a, b));
    return rcpp_result_gen;
END_RCPP
}
// update_Y
arma::mat update_Y(arma::mat& U, arma::rowvec& a, arma::mat mu, int Q, double sigma_square);
RcppExport SEXP _BAGEL_update_Y(SEXP USEXP, SEXP aSEXP, SEXP muSEXP, SEXP QSEXP, SEXP sigma_squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Y(U, a, mu, Q, sigma_square));
    return rcpp_result_gen;
END_RCPP
}
// update_a
arma::rowvec update_a(arma::mat& U, arma::mat mu, arma::rowvec a, double sigma, double step);
RcppExport SEXP _BAGEL_update_a(SEXP USEXP, SEXP muSEXP, SEXP aSEXP, SEXP sigmaSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_a(U, mu, a, sigma, step));
    return rcpp_result_gen;
END_RCPP
}
// update_Comega
arma::mat update_Comega(arma::mat& omega, arma::mat Comega, int Q, double sigma_square, double step, double lower, double upper);
RcppExport SEXP _BAGEL_update_Comega(SEXP omegaSEXP, SEXP ComegaSEXP, SEXP QSEXP, SEXP sigma_squareSEXP, SEXP stepSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Comega(ComegaSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_square(sigma_squareSEXP);
    Rcpp::traits::input_parameter< double >::type step(stepSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Comega(omega, Comega, Q, sigma_square, step, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BAGEL_compute_mu", (DL_FUNC) &_BAGEL_compute_mu, 12},
    {"_BAGEL_compute_muk2", (DL_FUNC) &_BAGEL_compute_muk2, 10},
    {"_BAGEL_update_alpha", (DL_FUNC) &_BAGEL_update_alpha, 16},
    {"_BAGEL_update_gamma", (DL_FUNC) &_BAGEL_update_gamma, 16},
    {"_BAGEL_update_beta", (DL_FUNC) &_BAGEL_update_beta, 15},
    {"_BAGEL_compute_likelihood", (DL_FUNC) &_BAGEL_compute_likelihood, 4},
    {"_BAGEL_update_R", (DL_FUNC) &_BAGEL_update_R, 18},
    {"_BAGEL_update_e", (DL_FUNC) &_BAGEL_update_e, 21},
    {"_BAGEL_update_sig_square", (DL_FUNC) &_BAGEL_update_sig_square, 3},
    {"_BAGEL_update_sig_square_cub", (DL_FUNC) &_BAGEL_update_sig_square_cub, 3},
    {"_BAGEL_update_omega", (DL_FUNC) &_BAGEL_update_omega, 5},
    {"_BAGEL_update_gamma_sigma_square", (DL_FUNC) &_BAGEL_update_gamma_sigma_square, 4},
    {"_BAGEL_update_Y", (DL_FUNC) &_BAGEL_update_Y, 5},
    {"_BAGEL_update_a", (DL_FUNC) &_BAGEL_update_a, 5},
    {"_BAGEL_update_Comega", (DL_FUNC) &_BAGEL_update_Comega, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BAGEL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
