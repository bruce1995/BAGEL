library(Graph)
library(Graph)
usethis::use_rcpp()
usethis::use_rcpp()
load("~/Documents/BAREB/data/obs.rda")
load("~/Downloads/final_version/sim/200_sim1023396.Rdata")
setwd("~/Documents/Graph/data")
save(truth, file = "truth.rda")
obs <- NULL
obs$D <- D
obs$data <- data
obs$X <- X
obs$Y <- Y
save(obs, file = "obs.rda")
setwd("~/Documents/Graph")
View(X)
View(data)
dim(truth$gamma)
library(Graph)
R CMD Rd2pdf Graph
build_manual(path=getwd())
devtools::build_manual(path=getwd())
library(Graph)
devtools::build_manual(path=getwd())
library(Graph)
devtools::build_manual(path=getwd())
library(Graph)
devtools::build_manual(path=getwd())
library(Graph)
devtools::build_manual(path=getwd())
library(Graph)
devtools::build_manual(path=getwd())
library(Graph)
data("obs")
data("truth")
set.seed(1)
library(mvtnorm)
p <- 5    #five drugs
q <- 3    #five depression scores
library(Graph)
data("obs")
data("truth")
set.seed(1)
library(mvtnorm)
p <- 5    #five drugs
q <- 3    #three depression scores
N <- 200  #200 patients
r <- 5    #5 covariates
M <- 10   #10 basis
NN <- dim(D)[1]
NN <- dim(obs$D)[1]
library(Graph)
library(mvtnorm)
data("obs")
data("truth")
D    <- obs$D
data <- obs$data
X    <- obs$X
set.seed(1)
p <- 5    #five drugs
q <- 3    #three depression scores
N <- 200  #200 patients
r <- 5    #5 covariates
M <- 10   #10 basis
NN <- dim(D)[1]
Sig <- diag(q)
Iter <- 100
K  <- 2
sigma_square <- 1
eta <- truth$eta
eta[3] <- 9
eta[4] <- 18
sigma_square_phi <-  sigma_square_A <- sigma_square_beta <- 1
phi   <- array(rnorm((r+s)*q*p*K,sd=1), dim=c(s+r,q*p, K))
beta  <- array(rnorm((M)*q*p*K,sd=1), dim=c(M,q*p, K))
phi   <- array(rnorm((r+s)*q*p*K,sd=1), dim=c(r,q*p, K))
phi   <- array(rnorm((s)*q*p*K,sd=1), dim=c(r,q*p, K))
phi   <- array(rnorm(r*q*p*K,sd=1), dim=c(r,q*p, K))
beta  <- array(rnorm((M)*q*p*K,sd=1), dim=c(M,q*p, K))
A     <- array(rnorm(q*(1+r)*K,sd=1), dim=c(q,1+r, K))
gamma <- array(rbinom(q*p*K, size = 1, prob = rho), dim=c(q,p, K))
rho <- 0.1
Iter <- 100
K  <- 2
sigma_square <- 1
eta <- truth$eta
eta[3] <- 9
eta[4] <- 18
sigma_square_phi <-  sigma_square_A <- sigma_square_beta <- 1
phi   <- array(rnorm(r*q*p*K,sd=1), dim=c(r,q*p, K))
beta  <- array(rnorm((M)*q*p*K,sd=1), dim=c(M,q*p, K))
A     <- array(rnorm(q*(1+r)*K,sd=1), dim=c(q,1+r, K))
gamma <- array(rbinom(q*p*K, size = 1, prob = rho), dim=c(q,p, K))
cl    <- sample.int(K, size = N, replace = T)
Err <- rmvnorm(NN, rep(0,q), Sig)
Err   <- rmvnorm(NN, rep(0,q), Sig)
mu    <- compute_mu2_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, s,M)
mu    <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
Y <-  update_Y_cpp(D, eta, mu+Err, q,sigma_square )
#-----
BB  <- update_phi_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M,
mu, Y-Err, sigma_square, sigma_square_phi)
phi <- BB$phi
mu <- BB$mu
BB <- update_beta_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M,
mu, Y-Err, sigma_square, sigma_square_beta)
beta <- BB$beta
mu <- BB$mu
A    <- update_A_cpp(K, cl,phi, beta, gamma, A, X,
data, p, q, r, M, Y-Err, sigma_square, sigma_square_A)
mu <- compute_mu_cpp(K, cl,phi, beta, gamma, A, X, data, p, q, r,M)
gamma <- update_gamma_cpp(K, cl, phi, beta, gamma, A, X, data, p,q,r,M,
eta, D, mu,Y-Err, rho ,sigma_square )
mu <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
CC <- update_cl_cpp(K, cl,  phi, beta, gamma, A,
X, data, p, q, r, M,eta, D,  mu, Y-Err, N, sigma_square, 1, rho)
K <- CC$K
cl <- CC$cl
phi <- CC$phi
beta <- CC$beta
gamma <- CC$gamma
A <- CC$A
mu <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
rho <- update_rho(gamma)
Y <-  update_Y_cpp(D, eta, mu+Err, q,sigma_square )
eta <- update_eta_cpp(D, mu+Err, eta,0.3)
Err <- update_Err_cpp(Y, mu, Sig, sigma_square, q)
Sig <- update_Sig_cpp(Err, Sig, q, step = 100/NN)
sigma_square_A <- update_sig_square_cub_cpp(A, a=3, b=10)
sigma_square_phi <- update_sig_square_cub_cpp(phi, a=3, b=10)
sigma_square_beta <- update_beta_sigma_square_cpp(beta, M, a=10, b=1)
library(Graph)
library(mvtnorm)
data("obs")
data("truth")
D    <- obs$D
data <- obs$data
X    <- obs$X
set.seed(1)
p <- 5    #five drugs
q <- 3    #three depression scores
N <- 200  #200 patients
r <- 5    #5 covariates
M <- 10   #10 basis
NN <- dim(D)[1]
#------initialize--------
Sig <- diag(q)
rho <- 0.1
K  <- 2
sigma_square <- sigma_square_phi <-  sigma_square_A <- sigma_square_beta <- 1
eta <- truth$eta
eta[3] <- 9
eta[4] <- 18
phi   <- array(rnorm(r*q*p*K,sd=1), dim=c(r,q*p, K))
beta  <- array(rnorm((M)*q*p*K,sd=1), dim=c(M,q*p, K))
A     <- array(rnorm(q*(1+r)*K,sd=1), dim=c(q,1+r, K))
gamma <- array(rbinom(q*p*K, size = 1, prob = rho), dim=c(q,p, K))
cl    <- sample.int(K, size = N, replace = T)
Err   <- rmvnorm(NN, rep(0,q), Sig)
mu    <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
Y <-  update_Y_cpp(D, eta, mu+Err, q,sigma_square )
Iter <- 10
for(iter in 1:Iter){
#-----
BB  <- update_phi_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M,
mu, Y-Err, sigma_square, sigma_square_phi)
phi <- BB$phi
mu <- BB$mu
BB <- update_beta_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M,
mu, Y-Err, sigma_square, sigma_square_beta)
beta <- BB$beta
mu <- BB$mu
A    <- update_A_cpp(K, cl,phi, beta, gamma, A, X,
data, p, q, r, M, Y-Err, sigma_square, sigma_square_A)
mu <- compute_mu_cpp(K, cl,phi, beta, gamma, A, X, data, p, q, r,M)
gamma <- update_gamma_cpp(K, cl, phi, beta, gamma, A, X, data, p,q,r,M,
eta, D, mu,Y-Err, rho ,sigma_square )
mu <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
CC <- update_cl_cpp(K, cl,  phi, beta, gamma, A,
X, data, p, q, r, M,eta, D,  mu, Y-Err, N, sigma_square, 1, rho)
K <- CC$K
cl <- CC$cl
phi <- CC$phi
beta <- CC$beta
gamma <- CC$gamma
A <- CC$A
mu <- compute_mu_cpp(K, cl,  phi, beta, gamma, A, X, data, p, q, r, M)
rho <- update_rho(gamma)
Y <-  update_Y_cpp(D, eta, mu+Err, q,sigma_square )
eta <- update_eta_cpp(D, mu+Err, eta,0.3)
Err <- update_Err_cpp(Y, mu, Sig, sigma_square, q)
Sig <- update_Sig_cpp(Err, Sig, q, step = 100/NN)
sigma_square_A <- update_sig_square_cub_cpp(A, a=3, b=10)
sigma_square_phi <- update_sig_square_cub_cpp(phi, a=3, b=10)
sigma_square_beta <- update_beta_sigma_square_cpp(beta, M, a=10, b=1)
#------
}
library(BAGEL)
library(BAGEL)
library(devtools)
build_manual()
library(BAGEL)
update_beta_cpp
setwd("~/Documents/BAGEL/data")
load("~/Documents/BAGEL/data/obs.rda")
load("~/Documents/BAGEL/data/truth.rda")
truth$U <- obs$U
truth$data <- obs$data
truth$Z <- obs$Z
simulated_data <- truth
save(simulated_data, fi)
save(simulated_data, file = "simulated_data.Rdata")
library(BAGEL)
library(mvtnorm)
data("simulated_data")
library(BAGEL)
data("simulated_data")
load("~/Documents/Graph backup/data/obs.rda")
load("~/Documents/Graph backup/data/truth.rda")
simulated_data
save(simulated_data, file = "simulated_data.Rdata")
library(BAGEL)
library(BAGEL)
library(mvtnorm)
data("obs")
data("truth")
U    <- simulated_data$U
data <- simulated_data$data
Z    <- simulated_data$Z
set.seed(1)
D <- 5    #five drugs
Q <- 3    #three depression scores
N <- 200  #200 patients
S <- 5    #5 covariates
B <- 10   #10 basis
NN <- dim(U)[1]
#------initialize--------
Comega <- diag(Q)
rho <- 0.1
H  <- 2
sigma_square <- sigma_square_alpha <- sigma_square_beta <- sigma_square_gamma <- 1
a <- c(-100, 0, 9, 18, 100)
alpha <- array(rnorm(S*Q*D*H,sd=1), dim=c(S,D*Q, H))
gamma <- array(rnorm(B*Q*D*H,sd=1), dim=c(B,Q*D, H))
beta  <- array(rnorm(Q*(1+S)*H,sd=1), dim=c(Q,1+S, H))
R     <- array(rbinom(D*Q*H, size = 1, prob = rho), dim=c(Q,D, H))
e     <- sample.int(H, size = N, replace = T)
omega <- rmvnorm(NN, rep(0,Q), Comega)
mu    <- compute_mu_cpp(H, e,  alpha, gamma, R, beta, Z, data, D, Q, S, B)
Y     <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
for(iter in 1:100){
RETURNALPHA <- update_alpha_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_alpha)
alpha <- RETURNALPHA$alpha
mu    <- RETURNALPHA$mu
RETURNGAMMA <- update_gamma_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_gamma)
gamma <- RETURNGAMMA$gamma
mu    <- RETURNGAMMA$mu
beta <- update_beta_cpp(H, e, alpha, gamma, R, beta, Z,
data, D, Q, S, B, Y-omega, sigma_square, sigma_square_beta)
mu   <- compute_mu_cpp(H, e,alpha, gamma, R, beta, Z, data, D, Q, S, B)
R  <- update_R_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
a, U, mu,Y-omega, rho ,sigma_square )
mu <- compute_mu_cpp(H, e,  alpha, gamma,  R, beta, Z, data, D, Q, S, B)
RETURNE <- update_e_cpp(H, e, alpha, gamma, R, beta,
Z, data, D, Q, S, B,a, U, mu, Y-omega, N, sigma_square, 1, rho, 10)
H     <- RETURNE$H
e     <- RETURNE$e
alpha <- RETURNE$alpha
gamma <- RETURNE$gamma
R     <- RETURNE$R
beta  <- RETURNE$beta
mu    <- compute_mu_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B)
rho                <- update_rho(R)
Y                  <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
a                  <- update_a_cpp(U, mu+omega, a, sqrt(sigma_square),0.3)
omega              <- update_omega_cpp(Y, mu, Comega, sigma_square, Q)
Comega             <- update_Comega_cpp(omega, Comega, Q, sigma_square, step = 100/NN)
sigma_square_beta  <- update_sig_square_cub_cpp(beta, a=3, b=10)
sigma_square_alpha <- update_sig_square_cub_cpp(alpha, a=3, b=10)
sigma_square_gamma <- update_gamma_sigma_square_cpp(gamma, B, a=10, b=1)
}
library(BAGEL)
library(mvtnorm)
data("obs")
data("truth")
U    <- simulated_data$U
data <- simulated_data$data
Z    <- simulated_data$Z
set.seed(1)
D <- 5    #five drugs
Q <- 3    #three depression scores
N <- 200  #200 patients
S <- 5    #5 covariates
B <- 10   #10 basis
NN <- dim(U)[1]
#------initialize--------
Comega <- diag(Q)
rho <- 0.1
H  <- 2
sigma_square <- sigma_square_alpha <- sigma_square_beta <- sigma_square_gamma <- 1
a <- c(-100, 0, 9, 18, 100)
alpha <- array(rnorm(S*Q*D*H,sd=1), dim=c(S,D*Q, H))
gamma <- array(rnorm(B*Q*D*H,sd=1), dim=c(B,Q*D, H))
beta  <- array(rnorm(Q*(1+S)*H,sd=1), dim=c(Q,1+S, H))
R     <- array(rbinom(D*Q*H, size = 1, prob = rho), dim=c(Q,D, H))
e     <- sample.int(H, size = N, replace = T)
omega <- rmvnorm(NN, rep(0,Q), Comega)
mu    <- compute_mu_cpp(H, e,  alpha, gamma, R, beta, Z, data, D, Q, S, B)
Y     <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
for(iter in 1:100){
RETURNALPHA <- update_alpha_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_alpha)
alpha <- RETURNALPHA$alpha
mu    <- RETURNALPHA$mu
RETURNGAMMA <- update_gamma_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_gamma)
gamma <- RETURNGAMMA$gamma
mu    <- RETURNGAMMA$mu
beta <- update_beta_cpp(H, e, alpha, gamma, R, beta, Z,
data, D, Q, S, B, Y-omega, sigma_square, sigma_square_beta)
mu   <- compute_mu_cpp(H, e,alpha, gamma, R, beta, Z, data, D, Q, S, B)
R  <- update_R_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
a, U, mu,Y-omega, rho ,sigma_square )
mu <- compute_mu_cpp(H, e,  alpha, gamma,  R, beta, Z, data, D, Q, S, B)
RETURNE <- update_e_cpp(H, e, alpha, gamma, R, beta,
Z, data, D, Q, S, B,a, U, mu, Y-omega, N, sigma_square, 1, rho, 10)
H     <- RETURNE$H
e     <- RETURNE$e
alpha <- RETURNE$alpha
gamma <- RETURNE$gamma
R     <- RETURNE$R
beta  <- RETURNE$beta
mu    <- compute_mu_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B)
rho                <- update_rho(R)
Y                  <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
a                  <- update_a_cpp(U, mu+omega, a, sqrt(sigma_square),0.3)
omega              <- update_omega_cpp(Y, mu, Comega, sigma_square, Q)
Comega             <- update_Comega_cpp(omega, Comega, Q, sigma_square, step = 100/NN)
sigma_square_beta  <- update_sig_square_cub_cpp(beta, a=3, b=10)
sigma_square_alpha <- update_sig_square_cub_cpp(alpha, a=3, b=10)
sigma_square_gamma <- update_gamma_sigma_square_cpp(gamma, B, a=10, b=1)
}
library(BAGEL)
library(mvtnorm)
data("simulated_data")
U    <- simulated_data$U
data <- simulated_data$data
Z    <- simulated_data$Z
set.seed(1)
D <- 5    #five drugs
Q <- 3    #three depression scores
N <- 200  #200 patients
S <- 5    #5 covariates
B <- 10   #10 basis
NN <- dim(U)[1]
#------initialize--------
Comega <- diag(Q)
rho <- 0.1
H  <- 2
sigma_square <- sigma_square_alpha <- sigma_square_beta <- sigma_square_gamma <- 1
a <- c(-100, 0, 9, 18, 100)
alpha <- array(rnorm(S*Q*D*H,sd=1), dim=c(S,D*Q, H))
gamma <- array(rnorm(B*Q*D*H,sd=1), dim=c(B,Q*D, H))
beta  <- array(rnorm(Q*(1+S)*H,sd=1), dim=c(Q,1+S, H))
R     <- array(rbinom(D*Q*H, size = 1, prob = rho), dim=c(Q,D, H))
e     <- sample.int(H, size = N, replace = T)
omega <- rmvnorm(NN, rep(0,Q), Comega)
mu    <- compute_mu_cpp(H, e,  alpha, gamma, R, beta, Z, data, D, Q, S, B)
Y     <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
for(iter in 1:100){
RETURNALPHA <- update_alpha_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_alpha)
alpha <- RETURNALPHA$alpha
mu    <- RETURNALPHA$mu
RETURNGAMMA <- update_gamma_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_gamma)
gamma <- RETURNGAMMA$gamma
mu    <- RETURNGAMMA$mu
beta <- update_beta_cpp(H, e, alpha, gamma, R, beta, Z,
data, D, Q, S, B, Y-omega, sigma_square, sigma_square_beta)
mu   <- compute_mu_cpp(H, e,alpha, gamma, R, beta, Z, data, D, Q, S, B)
R  <- update_R_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
a, U, mu,Y-omega, rho ,sigma_square )
mu <- compute_mu_cpp(H, e,  alpha, gamma,  R, beta, Z, data, D, Q, S, B)
RETURNE <- update_e_cpp(H, e, alpha, gamma, R, beta,
Z, data, D, Q, S, B,a, U, mu, Y-omega, N, sigma_square, 1, rho, 10)
H     <- RETURNE$H
e     <- RETURNE$e
alpha <- RETURNE$alpha
gamma <- RETURNE$gamma
R     <- RETURNE$R
beta  <- RETURNE$beta
mu    <- compute_mu_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B)
rho                <- update_rho(R)
Y                  <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
a                  <- update_a_cpp(U, mu+omega, a, sqrt(sigma_square),0.3)
omega              <- update_omega_cpp(Y, mu, Comega, sigma_square, Q)
Comega             <- update_Comega_cpp(omega, Comega, Q, sigma_square, step = 100/NN)
sigma_square_beta  <- update_sig_square_cub_cpp(beta, a=3, b=10)
sigma_square_alpha <- update_sig_square_cub_cpp(alpha, a=3, b=10)
sigma_square_gamma <- update_gamma_sigma_square_cpp(gamma, B, a=10, b=1)
}
library(BAGEL)
library(mvtnorm)
data("simulated_data")
U    <- simulated_data$U
data <- simulated_data$data
Z    <- simulated_data$Z
set.seed(1)
D <- 5    #five drugs
Q <- 3    #three depression scores
N <- 200  #200 patients
S <- 5    #5 covariates
B <- 10   #10 basis
NN <- dim(U)[1]
#------initialize--------
Comega <- diag(Q)
rho <- 0.1
H  <- 2
sigma_square <- sigma_square_alpha <- sigma_square_beta <- sigma_square_gamma <- 1
a <- c(-100, 0, 9, 18, 100)
alpha <- array(rnorm(S*Q*D*H,sd=1), dim=c(S,D*Q, H))
gamma <- array(rnorm(B*Q*D*H,sd=1), dim=c(B,Q*D, H))
beta  <- array(rnorm(Q*(1+S)*H,sd=1), dim=c(Q,1+S, H))
R     <- array(rbinom(D*Q*H, size = 1, prob = rho), dim=c(Q,D, H))
e     <- sample.int(H, size = N, replace = T)
omega <- rmvnorm(NN, rep(0,Q), Comega)
mu    <- compute_mu_cpp(H, e,  alpha, gamma, R, beta, Z, data, D, Q, S, B)
Y     <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
for(iter in 1:100){
RETURNALPHA <- update_alpha_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_alpha)
alpha <- RETURNALPHA$alpha
mu    <- RETURNALPHA$mu
RETURNGAMMA <- update_gamma_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
mu, Y-omega, sigma_square, sigma_square_gamma)
gamma <- RETURNGAMMA$gamma
mu    <- RETURNGAMMA$mu
beta <- update_beta_cpp(H, e, alpha, gamma, R, beta, Z,
data, D, Q, S, B, Y-omega, sigma_square, sigma_square_beta)
mu   <- compute_mu_cpp(H, e,alpha, gamma, R, beta, Z, data, D, Q, S, B)
R  <- update_R_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B,
a, U, mu,Y-omega, rho ,sigma_square )
mu <- compute_mu_cpp(H, e,  alpha, gamma,  R, beta, Z, data, D, Q, S, B)
RETURNE <- update_e_cpp(H, e, alpha, gamma, R, beta,
Z, data, D, Q, S, B,a, U, mu, Y-omega, N, sigma_square, 1, rho, 10)
H     <- RETURNE$H
e     <- RETURNE$e
alpha <- RETURNE$alpha
gamma <- RETURNE$gamma
R     <- RETURNE$R
beta  <- RETURNE$beta
mu    <- compute_mu_cpp(H, e, alpha, gamma, R, beta, Z, data, D, Q, S, B)
rho                <- update_rho(R)
Y                  <- update_Y_cpp(U, a, mu+omega, Q,sigma_square )
a                  <- update_a_cpp(U, mu+omega, a, sqrt(sigma_square),0.3)
omega              <- update_omega_cpp(Y, mu, Comega, sigma_square, Q)
Comega             <- update_Comega_cpp(omega, Comega, Q, sigma_square, step = 100/NN)
sigma_square_beta  <- update_sig_square_cub_cpp(beta, a=3, b=10)
sigma_square_alpha <- update_sig_square_cub_cpp(alpha, a=3, b=10)
sigma_square_gamma <- update_gamma_sigma_square_cpp(gamma, B, a=10, b=1)
}
data("simulated_data")
load("~/Documents/BAGEL/data/simulated_data.Rdata")
library(BAGEL)
data("simulated_data")
data("truth")
load("~/Documents/BAGEL/data/simulated_data.Rdata")
build_manual()
library(BAGEL)
data("simulated_data")
